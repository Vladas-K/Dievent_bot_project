import requests
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, CallbackContext

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_URL = "http://127.0.0.1:8000/api/events/"  # URL API
BOT_TOKEN = ""  # –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def start(update: Update, context: CallbackContext) -> None:
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = update.effective_user
    user_data = {
        "user_id": str(user.id),
        "username": user.username,
        "first_name": user.first_name,
        "last_name": user.last_name,
        "subscribed": True
    }
    requests.post("http://127.0.0.1:8000/api/users/", json=user_data)
    
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π /events, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è!")

async def get_events(update: Update, context: CallbackContext) -> None:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    response = requests.get(API_URL)
    if response.status_code == 200:
        events = response.json()
        if not events:
            await update.message.reply_text("–°–∫–æ—Ä–æ –±—É–¥—É—Ç –Ω–æ–≤—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!")
            return
        
        for event in events[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–º 5 —Å–æ–±—ã—Ç–∏—è–º–∏
            keyboard = [
                [InlineKeyboardButton("üìñ –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"desc_{event['id']}")],
                [InlineKeyboardButton("üóì –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", callback_data=f"date_{event['id']}")],
                [InlineKeyboardButton("üìç –õ–æ–∫–∞—Ü–∏—è", callback_data=f"loc_{event['id']}")],
                [InlineKeyboardButton("üè¢ –ö–æ–º–ø–∞–Ω–∏—è", callback_data=f"comp_{event['id']}")],
                [InlineKeyboardButton("üëó –î—Ä–µ—Å—Å-–∫–æ–¥", callback_data=f"dress_{event['id']}")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(f"üìå *{event['title']}*", parse_mode="Markdown", reply_markup=reply_markup)
    else:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def button_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫."""
    query = update.callback_query
    await query.answer()
    
    event_id, field = query.data.split("_")[1], query.data.split("_")[0]
    response = requests.get(f"{API_URL}{event_id}/")
    
    if response.status_code == 200:
        event = response.json()
        fields_map = {
            "desc": f"üìñ –û–ø–∏—Å–∞–Ω–∏–µ:\n{event['description']}",
            "date": f"üóì –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:\n{event['date_time']}",
            "loc": f"üìç –õ–æ–∫–∞—Ü–∏—è:\n{event['location']}",
            "comp": f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è:\n{event['company_info']}",
            "dress": f"üëó –î—Ä–µ—Å—Å-–∫–æ–¥:\n{event['dress_code']}",
        }
        
        if field in fields_map:
            await query.message.reply_text(fields_map[field])
    else:
        await query.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö!")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    app = Application.builder().token(BOT_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("events", get_events))
    app.add_handler(CallbackQueryHandler(button_handler))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
    
    app.run_polling()

if __name__ == "__main__":
    main()
