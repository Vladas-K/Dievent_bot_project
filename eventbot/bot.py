import logging
import os
from datetime import datetime

import aiohttp
from dotenv import load_dotenv
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    Update,
)
from telegram.ext import (
    Application,
    CallbackContext,
    CallbackQueryHandler,
    CommandHandler,
    MessageHandler,
    filters,
)

load_dotenv()
BOT_TOKEN = os.getenv("TOKEN")
API_URL = os.getenv("API_URL")
USER_API_URL = os.getenv("USER_API_URL")

if not BOT_TOKEN or not API_URL:
    raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TOKEN –∏–ª–∏ API_URL –≤ .env —Ñ–∞–π–ª–µ")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def main_keyboard():
    return ReplyKeyboardMarkup([["–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏"]], resize_keyboard=True)


async def start(update: Update, context: CallbackContext) -> None:
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = update.effective_user
    user_data = {
        "user_id": str(user.id),
        "username": user.username,
        "first_name": user.first_name,
        "last_name": user.last_name,
        "subscribed": True,
    }

    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(
                USER_API_URL, json=user_data, headers={"Bot-Token": BOT_TOKEN}
            ) as response:
                response.raise_for_status()
        except aiohttp.ClientResponseError as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e.status}, "
                f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å user_id {user_data['user_id']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
            )
        except Exception as e:
            logger.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {e}")

    await update.message.reply_text(
        f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã –≤–∫–ª—é—á–∏–ª–∏ –º–µ–Ω—è, {user_data['first_name']}! "
        f"–Ø –±–æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏,"
        f"—á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è!",
        reply_markup=main_keyboard(),
    )


async def get_events(update: Update, context: CallbackContext) -> None:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(API_URL) as response:
                response.raise_for_status()
                events = await response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: {e}")
            await update.message.reply_text(
                "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return

    if not events:
        await update.message.reply_text(
            "–°–∫–æ—Ä–æ –±—É–¥—É—Ç –Ω–æ–≤—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!"
        )
        return

    for event in events[:5]:
        keyboard = [
            [InlineKeyboardButton("üìñ –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"desc_{event['id']}")],
            [
                InlineKeyboardButton(
                    "üóì –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", callback_data=f"date_{event['id']}"
                )
            ],
            [
                InlineKeyboardButton(
                    "üìç –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è", callback_data=f"loc_{event['id']}"
                )
            ],
            [
                InlineKeyboardButton(
                    "üè¢ –ö–æ–º–ø–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä", callback_data=f"comp_{event['id']}"
                )
            ],
            [
                InlineKeyboardButton(
                    "üëó –î—Ä–µ—Å—Å-–∫–æ–¥", callback_data=f"dress_{event['id']}"
                )
            ],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            f"üìå *{event['title']}*", parse_mode="Markdown", reply_markup=reply_markup
        )


async def button_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫."""
    query = update.callback_query
    await query.answer()

    field, event_id = query.data.split("_", 1)
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(f"{API_URL}{event_id}/") as response:
                response.raise_for_status()
                event = await response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–±—ã—Ç–∏–∏: {e}")
            await query.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö!")
            return

    # –ü–∞—Ä—Å–∏–Ω–≥ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    date_time_str = event["date_time"]
    date_time_obj = datetime.fromisoformat(date_time_str)
    formatted_date_time = date_time_obj.strftime("%d.%m.%Y –≤ %H:%M")

    fields_map = {
        "desc": f"üìñ –û–ø–∏—Å–∞–Ω–∏–µ:\n{event['description']}",
        "date": f"üóì –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:\n{formatted_date_time}",
        "loc": f"üìç –õ–æ–∫–∞—Ü–∏—è:\n{event['location']}",
        "comp": f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è:\n{event['company_info']}",
        "dress": f"üëó –î—Ä–µ—Å—Å-–∫–æ–¥:\n{event['dress_code']}",
    }

    if field in fields_map:
        await query.message.reply_text(fields_map[field])


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(
        MessageHandler(filters.TEXT & filters.Regex("^–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏$"), get_events)
    )
    app.add_handler(CallbackQueryHandler(button_handler))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()
